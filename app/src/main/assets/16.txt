proagram 10.c

#include<stdio.h>
struct proc
{
	int id,arraival,burst,rem,wait,finish,turnaround;
	float ratio;
}process[10];
struct proc temp;
int no;
int checkprocess(int);
int nextprocess();
void roundrobin(int,int,int[],int[]);
void srtf(int);
main()
{
	int n,tq,choice;
	int bt[10],st[10],i,j,k;
	for(;;)
{
printf("\n Enter the Choice\n");
printf("1.roundrobin \n 2.srtf\n 3.exit\n");
scanf("%d",&choice);
switch(choice)
{
case 1:printf("Roundrobin scheduling algorithm\n");
printf("Enter the number of process\n");
scanf("%d",&n);
printf("\n ENter the burst timer for  sequence:");
for(i=0;i<n;i++)
{
scanf("%d",&bt[i]);
st[i]=bt[i];
}
printf("\n Enter the time quantum:");
scanf("%d",&tq);
roundrobin(n,tq,st,bt);
break;
case 2:printf("\n\n......Shortest reamining time next.....\n");
printf("\n Enter the no of process\n");
scanf("%d",&n);
srtf(n);
case 3:break;
}
}
}
void roundrobin(int n,int tq,int st[],int bt[])
{
int time=0;
int tat[10],wt[10],i,count=0,swt=0,stat=0,temp1,sq=0,j,k;
float awt=0,atat=0;
while(1)
{
for(i=0,count=0;i<n;i++)
{
	temp1=tq;
if(st[i]==0)
{
count++;
continue;
}
if(st[i]>tq)
st[i]=st[i]-tq;
else if(st[i]>=0)
{
temp1=st[i];
st[i]=0;
}
sq=sq+temp1;
tat[i]=sq;
}
if(n==count)
break;
}
for(i=0;i<n;i++)
{
wt[i]=tat[i]-bt[i];
swt=swt+wt[i];
stat=stat+tat[i];
}
awt=(float)swt/n;
atat=(float)stat/n;
printf("\n Process_no burst time wait time turn around time \n");
for(i=0;i<n;i++)
printf("%d \t%d\t\t%d\t\t%d\n",i+1,bt[i],wt[i],tat[i]);
printf("\n avg wait time is %f\n avg turn around time is %f\n",awt,atat);
}
int checkprocess(int s)
{
int i;
for(i=1;i<=s;i++)
{
if(process[i].rem!=0)
return 1;
}
return 0;
}
int nextprocess()
{
int min,l,i;
min=32000;
for(i=1;i<=no;i++)
{
if(process[i].rem!=0 && process[i].rem<min)
{
min=process[i].rem;
l=i;
}
}
return l;
}
void srtf(int n)
{
int i,j,k,time=0;
float tavg=0.0,wavg=0.0;
for(i=1;i<=n;i++)
{
process[i].id=i;
printf("\n \n Enter the arraival time for process %d",i);
scanf("%d",&(process[i].arraival));
printf("\n Enter the burst time for process %d:",i);
scanf("%d",&(process[i].burst));
process[i].rem=process[i].burst;
}
for(i=1;i<=n;i++)
{
for(j=i+1;j<=n;j++)
{
if(process[i].arraival>process[j].arraival)
{
temp=process[i];
process[i]=process[j];
process[j]=temp;
}
}
}
no=0;
j=1;
while(checkprocess(n)==1)
{
if(process[no+1].arraival==time)
{
no++;
if(process[j].rem==0)
process[j].finish=time;
j=nextprocess();
}
if(process[j].rem!=0)
{
process[j].rem--;
for(i=1;i<=no;i++)
{
if(i!=j && process[i].rem!=0)
process[i].wait++;
}
}
else
{
process[i].finish=time;
j=nextprocess();
time--;
k=j;
}
time++;
}
process[k].finish=time;
printf("\n\n\t\t.....shortest remaining time first.....");
printf("\n Process arraival burst waiting finishing turnaround tr/tb\n");
printf("%5s%9s%7s%10s%8s%9s","id","time","time","time","time","time","time");
for(i=1;i<=n;i++)
{
process[i].turnaround=process[i].wait+process[i].burst;
process[i].ratio=(float)process[i].turnaround/(float)process[i].burst;
printf("\n%5d %8d %7d %8d %10d %9d% 10.1f",process[i].id,process[i].arraival,process[i].burst,process[i].turnaround,process[i].ratio);
tavg=tavg+process[i].turnaround;
wavg=wavg+process[i].wait;
printf("\n\n");
}
tavg=tavg /n;
wavg=wavg /n;
printf("\n tavg=%f\n wavg=%f\t",tavg,wavg);
}
//end of program:10
